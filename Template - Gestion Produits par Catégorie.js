/**
 * @file Template - Gestion de Cours par Cat√©gorie
 * @description Script Google Apps pour lire et assembler des donn√©es de cours structur√©es
 * ¬† ¬† ¬† ¬† ¬† ¬† ¬†√† partir de plusieurs feuilles dans un Google Sheet.
 * @version 1.0.2 (Correction TypeError setHeader et getCategoryName)
 * @author Gemini Code Assist
 */

// --- CONFIGURATION ---

// URL du script central qui g√®re le catalogue. Ce script l'appellera pour invalider le cache.
const CENTRAL_ADMIN_API_URL = "https://script.google.com/macros/s/AKfycbyV__ejuztXjqzNjopK6MCPItPVfPj-2_tmLHxMULghms9UmuE2wG0XWLKD5XtvlqLPjw/exec";
const ALLOWED_ORIGIN = 'https://junior-senior-gaps-killer.vercel.app'; // Domaine autoris√© pour CORS

// --- GESTIONNAIRES D'√âV√âNEMENTS (TRIGGERS) ---

/**
 * Cr√©e un menu personnalis√© √† l'ouverture de la feuille de calcul.
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('Gestion des Cours')
      .addItem('üöÄ Initialiser les feuilles de cours', 'setupCourseSheets')
      .addSeparator()
      .addItem('üóëÔ∏è Supprimer les donn√©es de d√©mo', 'clearDemoData')
      .addSeparator()
      .addItem('Forcer la mise √† jour du cache global', 'invalidateGlobalCache')
      .addToUi();
}

/**
 * Se d√©clenche automatiquement √† chaque modification de la feuille.
 * Invalide le cache global pour que le front-end r√©cup√®re les nouvelles donn√©es.
 */
function onEdit(e) {
  Logger.log("Modification d√©tect√©e. Invalidation du cache global demand√©e.");
  invalidateGlobalCache();
}

// --- POINTS D'ENTR√âE DE L'API WEB (doGet, doPost, doOptions) ---

/**
 * G√®re les requ√™tes OPTIONS pour le pr√©-vol CORS. Essentiel pour les requ√™tes POST.
 */
function doOptions(e) {
  // R√©pond aux requ√™tes de pr√©-v√©rification CORS
  return ContentService.createTextOutput()
    .setHeader('Access-Control-Allow-Origin', ALLOWED_ORIGIN)
    .setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS')
    .setHeader('Access-Control-Allow-Headers', 'Content-Type');
}

// --- CONFIGURATION ---
const CENTRAL_SHEET_ID = "1xcW_lPim1AvD-RWDD0FtpAMYSrWq-FSv9XGa1ys2Xv4"; // IMPORTANT: ID de la feuille centrale
const DEFAULT_IMAGE_URL = "https://i.postimg.cc/D0b7ZxQc/Logo-for-Training-Platform-Dynamic-Emblem.png";


/**
 * Point d'entr√©e pour les requ√™tes GET.
 * L'action principale est `getProducts` (conserv√© pour la compatibilit√©) qui renvoie les fiches de cours compl√®tes.
 */
function doGet(e) {
  const origin = (e && e.headers && (e.headers.Origin || e.headers.origin)) || null;
  try {
    const action = e.parameter.action;

    if (action === 'getProducts') {
      const categoryName = getCategoryName();
      const fichesCours = getAllCoursData(categoryName);
      const responseData = { success: true, data: fichesCours };
      return createJsonResponse(responseData, origin);
    }

    return createJsonResponse({ success: false, error: "Action GET non reconnue." }, origin);
  } catch (error) {
    Logger.log("ERREUR dans doGet : " + error.toString());
    return createJsonResponse({ success: false, error: error.message }, origin);
  }
}

/**
 * Point d'entr√©e pour les requ√™tes POST. Actuellement non utilis√©, mais pr√™t pour de futures actions.
 */
function doPost(e) {
  const origin = e.headers ? e.headers.Origin : null;
  try {
    const request = JSON.parse(e.postData.contents);
    return createJsonResponse({ success: false, error: `Action POST non reconnue: ${request.action}` }, origin);
  } catch (error) {
    Logger.log("ERREUR dans doPost : " + error.toString());
    return createJsonResponse({ success: false, error: error.message }, origin);
  }
}

// --- LOGIQUE M√âTIER : ASSEMBLAGE DES DONN√âES DE COURS ---

/**
 * Fonction principale qui orchestre la r√©cup√©ration et l'assemblage de toutes les donn√©es de cours.
 * @param {string} categoryName - Le nom de la cat√©gorie (ex: "Backend").
 * @returns {Array<Object>} Un tableau de fiches de cours compl√®tes.
 */
function getAllCoursData(categoryName) {
  Logger.log(`D√©but de l'assemblage pour la cat√©gorie : ${categoryName}`);

  // 1. Lire toutes les donn√©es de toutes les feuilles en une seule fois pour l'efficacit√©.
  const allData = {
    cours: sheetToJSON(SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Cours_${categoryName}`)),
    modules: sheetToJSON(SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Modules_${categoryName}`)),
    chapitres: sheetToJSON(SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Chapitres_${categoryName}`)),
    quizChapitres: sheetToJSON(SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Quiz_Chapitres_${categoryName}`)),
    quizModules: sheetToJSON(SpreadsheetApp.getActiveSpreadsheet().getSheetByName(`Quiz_Modules_${categoryName}`))
  };

  Logger.log(`Donn√©es brutes lues : ${allData.cours.length} cours, ${allData.modules.length} modules, ${allData.chapitres.length} chapitres.`);

  // 2. Pour chaque cours, g√©n√©rer sa fiche compl√®te.
  const fichesCompletes = allData.cours.map(cours => generateFicheCours(cours.ID_Cours, allData));

  Logger.log("Toutes les fiches de cours ont √©t√© g√©n√©r√©es.");
  return fichesCompletes.filter(f => f !== null);
}

/**
 * G√©n√®re une fiche de cours compl√®te et structur√©e pour un ID de cours donn√©.
 * @param {string} idCours - L'ID du cours √† assembler.
 * @param {Object} allData - Un objet contenant les donn√©es de toutes les feuilles.
 * @returns {Object} La fiche de cours compl√®te.
 */
function generateFicheCours(idCours, allData) {
  Logger.log(`G√©n√©ration de la fiche pour le cours ID: ${idCours}`);

  // 1. Trouver le cours de base.
  const coursBase = allData.cours.find(c => c.ID_Cours == idCours);
  if (!coursBase) {
    Logger.log(`Cours ID: ${idCours} non trouv√©.`);
    return null;
  }

  // 2. R√©cup√©rer les modules pour ce cours.
  const modulesDuCours = getModulesByCours(idCours, allData.modules);

  // 3. Pour chaque module, r√©cup√©rer ses chapitres et ses quiz.
  modulesDuCours.forEach(module => {
    // R√©cup√©rer les chapitres du module
    const chapitresDuModule = getChapitresByModule(module.ID_Module, allData.chapitres);

    // Pour chaque chapitre, r√©cup√©rer ses quiz
    chapitresDuModule.forEach(chapitre => {
      chapitre.quiz = getQuizByChapitre(chapitre.ID_Chapitre, allData.quizChapitres);
    });

    module.chapitres = chapitresDuModule;
    module.quiz = getQuizByModule(module.ID_Module, allData.quizModules);
  });

  // 4. Assembler la fiche finale.
  const ficheFinale = {
    ...coursBase,
    modules: modulesDuCours
  };

  logFiche(ficheFinale);
  return ficheFinale;
}

// --- FONCTIONS DE R√âCUP√âRATION DE DONN√âES (FILTRAGE) ---

function getModulesByCours(idCours, allModules) {
  return allModules.filter(m => m.ID_Cours == idCours).sort((a, b) => a.Ordre_Module - b.Ordre_Module);
}

function getChapitresByModule(idModule, allChapitres) {
  return allChapitres.filter(c => c.ID_Module == idModule).sort((a, b) => a.Ordre_Chapitre - b.Ordre_Chapitre);
}

function getQuizByChapitre(idChapitre, allQuiz) {
  return allQuiz.filter(q => q.ID_Chapitre == idChapitre);
}

function getQuizByModule(idModule, allQuiz) {
  return allQuiz.filter(q => q.ID_Module == idModule);
}

// --- FONCTIONS UTILITAIRES ---

/**
 * Renvoie uniquement le nom de la cat√©gorie (ex: "Backend") √† partir du nom de la feuille (ex: "Cours_Backend").
 */
function getCategoryName() {
  const sheetName = SpreadsheetApp.getActiveSpreadsheet().getSheets()[0].getName();
  // On retire le pr√©fixe "Cours_" pour obtenir uniquement le nom de la cat√©gorie
  return sheetName.replace('Cours_', '');
}

function initialiserAvecDonn√©esD√©mos() {
  const categoryName = getCategoryName();
  seedDefaultCourseData(categoryName);
  SpreadsheetApp.getUi().alert(`Les feuilles ont √©t√© remplies avec des donn√©es d'exemple pour la cat√©gorie "${categoryName}".`);
}
/**
 * Utilitaire pour invalider le cache global en appelant le script central.
 */
function invalidateGlobalCache() {
  // Appelle le script central pour lui dire de mettre √† jour la version du cache.
  UrlFetchApp.fetch(CENTRAL_ADMIN_API_URL + "?action=invalidateCache", {
    method: 'get', muteHttpExceptions: true
  });
  Logger.log("Demande d'invalidation du cache global envoy√©e.");
}

/**
 * Cr√©e une r√©ponse JSON standard.
 * CORRECTION: Suppression des appels √† setHeader qui causaient l'erreur TypeError.
 */
function createJsonResponse(data, origin) {
  const output = ContentService.createTextOutput(JSON.stringify(data));
  output.setMimeType(ContentService.MimeType.JSON);
  // La gestion CORS pour GET est assur√©e par la configuration du d√©ploiement
  // et la fonction doOptions pour le pre-flight.
  return output;
}

/**
 * Utilitaire pour convertir une feuille en JSON.
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - La feuille √† convertir.
 * @returns {Array<Object>} Un tableau d'objets repr√©sentant les lignes.
 */
function sheetToJSON(sheet) {
  if (!sheet || sheet.getLastRow() < 2) return [];
  const data = sheet.getRange(1, 1, sheet.getLastRow(), sheet.getLastColumn()).getValues();
  const headers = data.shift();
  return data.map(row => {
    const obj = {};
    headers.forEach((header, index) => {
      if (header) {
        obj[header] = row[index];
      }
    });
    return obj;
  });
}

/**
 * Affiche une version simplifi√©e de la fiche de cours dans les journaux d'ex√©cution.
 * @param {Object} fiche - La fiche de cours compl√®te.
 */
function logFiche(fiche) {
  Logger.log(`--- FICHE COURS : ${fiche.Nom_Cours} (ID: ${fiche.ID_Cours}) ---`);
  Logger.log(` ¬†Modules: ${fiche.modules.length}`);
  fiche.modules.forEach(m => {
    Logger.log(` ¬† ¬†- Module: ${m.Nom_Module} (Chapitres: ${m.chapitres.length}, Quiz: ${m.quiz.length})`);
  });
  Logger.log('----------------------------------------------------');
}

/**
 * Initialise toutes les feuilles n√©cessaires pour la gestion des cours d'une cat√©gorie.
 */
function setupCourseSheets() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();

  const response = ui.prompt('Configuration', 'Entrez le nom de la cat√©gorie (ex: Backend, DevOps):', ui.ButtonSet.OK_CANCEL);
  if (response.getSelectedButton() !== ui.Button.OK || !response.getResponseText()) {
    ui.alert('Op√©ration annul√©e.');
    return;
  }
  const categoryName = response.getResponseText().trim();
  ss.rename(categoryName); // Renomme la feuille de calcul elle-m√™me

  const sheetStructures = {
    [`Cours_${categoryName}`]: ["ID_Cours", "Nom_Cours", "R√©sum√©", "Dur√©e_Totale", "Niveau", "Prix", "URL_Vid√©o", "Image_Couverture", "Freemium_Start", "Freemium_End", "Objectifs", "Pr√©requis", "Avantage_Senior", "Public_Cible", "Formateur_Nom", "Formateur_Titre", "Formateur_Bio", "Note_Moyenne", "Avis"],
    [`Modules_${categoryName}`]: ["ID_Cours", "ID_Module", "Nom_Module", "Ordre_Module"],
    [`Chapitres_${categoryName}`]: ["ID_Module", "ID_Chapitre", "Nom_Chapitre", "Dur√©e", "Ressource", "Ordre_Chapitre"],
    [`Quiz_Chapitres_${categoryName}`]: ["ID_Chapitre", "Question", "R√©ponse_1", "R√©ponse_2", "R√©ponse_3", "R√©ponse_4", "Bonne_R√©ponse"],
    [`Quiz_Modules_${categoryName}`]: ["ID_Module", "Question", "R√©ponse_1", "R√©ponse_2", "R√©ponse_3", "R√©ponse_4", "Bonne_R√©ponse"]
  };

  // Supprimer les feuilles existantes sauf la premi√®re
  const allSheets = ss.getSheets();
  for (let i = allSheets.length - 1; i > 0; i--) {
    ss.deleteSheet(allSheets[i]);
  }

  let firstSheet = true;
  for (const sheetName in sheetStructures) {
    const headers = sheetStructures[sheetName];
    let sheet;
    if (firstSheet) {
      sheet = ss.getSheets()[0];
      sheet.setName(sheetName);
      sheet.clear();
      firstSheet = false;
    } else {
      sheet = ss.insertSheet(sheetName);
    }
    sheet.appendRow(headers);
    sheet.setFrozenRows(1);
    sheet.getRange(1, 1, 1, headers.length).setFontWeight("bold");
  }

  // CORRECTION: Appeler la fonction pour ajouter les donn√©es de d√©mo juste apr√®s la cr√©ation.
  seedDefaultCourseData(categoryName);
  ui.alert(`Structure de cours pour la cat√©gorie "${categoryName}" initialis√©e et remplie avec des donn√©es de d√©mo !`);
}

/**
 * NOUVEAU: Ajoute des donn√©es d'exemple dans les feuilles fra√Æchement cr√©√©es.
 * @param {string} categoryName - Le nom de la cat√©gorie pour laquelle ajouter les donn√©es.
 */
function seedDefaultCourseData(categoryName) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();

  try {
    // R√©cup√©ration des feuilles
    const coursSheet = ss.getSheetByName(`Cours_${categoryName}`);
    const modulesSheet = ss.getSheetByName(`Modules_${categoryName}`);
    const chapitresSheet = ss.getSheetByName(`Chapitres_${categoryName}`);
    const quizChapitresSheet = ss.getSheetByName(`Quiz_Chapitres_${categoryName}`);

    // --- Donn√©es d'exemple ---

    // Cours
    const coursData = [
      ["C-001", "Ma√Ætriser l'architecture microservices : les 10 pi√®ges que seul un CTO conna√Æt", "Un cours intensif qui va au-del√† des tutoriels basiques pour vous enseigner les strat√©gies et les erreurs √† √©viter, tir√©es de 15 ans d'exp√©rience terrain.", "8h 30min", "Interm√©diaire vers Expert", 75000, "https://www.youtube.com/embed/dQw4w9WgXcQ", "https://i.postimg.cc/pX3dYj8B/course-microservices.jpg", "0", "1200", "Ma√Ætriser les patterns de communication; Concevoir des API r√©silientes; G√©rer la consistance des donn√©es distribu√©es.", "Bases en d√©veloppement backend (Node.js, Java, ou autre); Connaissance des API REST.", "Apprenez √† penser comme un architecte syst√®me et non plus comme un simple d√©veloppeur.", "D√©veloppeurs Backend avec 3+ ans d'exp√©rience.", "Jean Dupont", "CTO @ TechInnov", "Apr√®s avoir men√© 3 transformations monolithiques vers microservices, j'ai condens√© mes plus grandes le√ßons (et √©checs) dans ce cours.", "4.8", "125 Avis"]
    ];

    // Modules
    const modulesData = [
      ["C-001", "M-001-1", "Fondations et Anti-Patterns", 1],
      ["C-001", "M-001-2", "Communication Inter-Services", 2]
    ];

    // Chapitres
    const chapitresData = [
      ["M-001-1", "CH-001-1-1", "Introduction : Pourquoi les microservices √©chouent (Freemium)", "20min", "PDF: Checklist des pr√©requis", 1],
      ["M-001-1", "CH-001-1-2", "Le pi√®ge du Monolithe Distribu√©", "45min", "Code: Exemple √† ne pas suivre", 2],
      ["M-001-2", "CH-001-2-1", "REST vs gRPC vs Message Queues", "55min", "Quiz d'√©valuation", 3]
    ];

    // Quiz
    const quizData = [
      ["CH-001-2-1", "Quel est le principal inconv√©nient d'une communication synchrone (REST) dans un syst√®me microservice ?", "Couplage temporel fort", "Performance", "S√©curit√©", "Complexit√© du code", "Couplage temporel fort"]
    ];

    // --- Insertion des donn√©es ---

    if (coursSheet && coursData.length > 0) {
      coursSheet.getRange(coursSheet.getLastRow() + 1, 1, coursData.length, coursData[0].length).setValues(coursData);
    }
    if (modulesSheet && modulesData.length > 0) {
      modulesSheet.getRange(modulesSheet.getLastRow() + 1, 1, modulesData.length, modulesData[0].length).setValues(modulesData);
    }
    if (chapitresSheet && chapitresData.length > 0) {
      chapitresSheet.getRange(chapitresSheet.getLastRow() + 1, 1, chapitresData.length, chapitresData[0].length).setValues(chapitresData);
    }
    if (quizChapitresSheet && quizData.length > 0) {
      quizChapitresSheet.getRange(quizChapitresSheet.getLastRow() + 1, 1, quizData.length, quizData[0].length).setValues(quizData);
    }

    ui.alert("Donn√©es de d√©monstration ajout√©es avec succ√®s !");

  } catch (e) {
    ui.alert("Erreur lors de l'ajout des donn√©es de d√©mo : " + e.message);
  }
}

/**
 * NOUVEAU: Supprime toutes les donn√©es (sauf les en-t√™tes) des feuilles de cours.
 */
function clearDemoData() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();

  const response = ui.alert(
    'Confirmation',
    'Voulez-vous vraiment supprimer toutes les donn√©es des feuilles de cours (les en-t√™tes seront conserv√©s) ? Cette action est irr√©versible.',
    ui.ButtonSet.YES_NO
  );

  if (response !== ui.Button.YES) {
    ui.alert('Op√©ration annul√©e.');
    return;
  }

  try {
    const allSheets = ss.getSheets();
    let clearedCount = 0;

    allSheets.forEach(sheet => {
      const sheetName = sheet.getName();
      // Cible uniquement les feuilles qui suivent la structure des cours
      if (sheetName.startsWith('Cours_') || sheetName.startsWith('Modules_') || sheetName.startsWith('Chapitres_') || sheetName.startsWith('Quiz_')) {
        const lastRow = sheet.getLastRow();
        if (lastRow > 1) {
          sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn()).clearContent();
          clearedCount++;
        }
      }
    });

    ui.alert(`${clearedCount} feuille(s) ont √©t√© nettoy√©es.`);
    invalidateGlobalCache(); // Invalider le cache apr√®s suppression

  } catch (e) {
    ui.alert("Erreur lors de la suppression des donn√©es : " + e.message);
  }
}
